/*
 * Created 2015-11-30 23:35:10
 */
package io.github.azige.moebooruviewer;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.RenderedImage;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.EventListener;
import java.util.EventObject;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.apache.commons.io.output.ByteArrayOutputStream;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

/**
 *
 * @author Azige
 */
@Component
@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)
public class ShowPostPanel extends javax.swing.JPanel{

    private static final Logger logger = LoggerFactory.getLogger(ShowPostPanel.class);

    @Autowired
    MoebooruViewer moebooruViewer;
    @Autowired
    private ExecutorService executor;
    @Autowired
    private MoebooruAPI mapi;
    @Autowired
    private NetIO netIO;
    @Autowired
    private UserSetting userSetting;

    private static final Map<Integer, Color> tagColorMap;
    private Post presentingPost;
    private Image image;
    private List<LoadingListener> loadingListeners = new ArrayList<>();
    private JFileChooser fileChooser = new JFileChooser();

    static{
        tagColorMap = new HashMap<>();
        tagColorMap.put(Tag.TYPE_GENERAL, Color.decode("0xEE8887"));
        tagColorMap.put(Tag.TYPE_ARTIST, Color.decode("0xCCCC00"));
        tagColorMap.put(Tag.TYPE_COPYRIGHT, Color.decode("0xDD00DD"));
        tagColorMap.put(Tag.TYPE_CHARACTER, Color.decode("0x00AA00"));
    }

    public class LoadingEvent extends EventObject{

        public LoadingEvent(){
            super(ShowPostPanel.this);
        }

        @Override
        public ShowPostPanel getSource(){
            return (ShowPostPanel)super.getSource();
        }
    }

    public interface LoadingListener extends EventListener{

        void loading(LoadingEvent event);

        void done(LoadingEvent event);
    }

    /**
     * Creates new form ShowPostFramePanel
     */
    public ShowPostPanel(){
        initComponents();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        postLabel = new javax.swing.JLabel();
        tagPanel = new javax.swing.JPanel();
        toolPanel = new javax.swing.JPanel();
        downloadLabel = new javax.swing.JLabel();
        downloadToLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(34, 34, 34));
        setLayout(new java.awt.BorderLayout());

        postLabel.setForeground(new java.awt.Color(255, 255, 255));
        postLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        postLabel.setText("加载中……");
        postLabel.setPreferredSize(new java.awt.Dimension(800, 600));
        add(postLabel, java.awt.BorderLayout.CENTER);

        tagPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        tagPanel.setOpaque(false);
        tagPanel.setLayout(new javax.swing.BoxLayout(tagPanel, javax.swing.BoxLayout.Y_AXIS));
        add(tagPanel, java.awt.BorderLayout.LINE_START);

        toolPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        toolPanel.setOpaque(false);
        toolPanel.setLayout(new javax.swing.BoxLayout(toolPanel, javax.swing.BoxLayout.Y_AXIS));

        downloadLabel.setForeground(new java.awt.Color(255, 255, 255));
        downloadLabel.setText("下载大图");
        downloadLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        downloadLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                downloadLabelMouseClicked(evt);
            }
        });
        toolPanel.add(downloadLabel);

        downloadToLabel.setForeground(new java.awt.Color(255, 255, 255));
        downloadToLabel.setText("下载大图至...");
        downloadToLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        downloadToLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                downloadToLabelMouseClicked(evt);
            }
        });
        toolPanel.add(downloadToLabel);

        add(toolPanel, java.awt.BorderLayout.LINE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void downloadLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_downloadLabelMouseClicked
        boolean force;

        if (SwingUtilities.isLeftMouseButton(evt)){
            force = false;
        }else if (SwingUtilities.isRightMouseButton(evt)){
            force = true;
        }else{
            return;
        }

        postLabel.setIcon(null);
        postLabel.setText("加载中……");
        image = null;
        executor.execute(() -> {
            image = netIO.loadOrigin(presentingPost, force);
            SwingUtilities.invokeLater(() -> {
                if (image != null){
                    showImage();
                }else{
                    postLabel.setText("加载失败！");
                }
            });
        });
    }//GEN-LAST:event_downloadLabelMouseClicked

    private void downloadToLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_downloadToLabelMouseClicked
        if (downloadToLabel.isEnabled()){
            if (userSetting.getLastSaveDir() != null){
                fileChooser.setCurrentDirectory(userSetting.getLastSaveDir());
            }
            File originFileCache = netIO.getOriginFileCache(presentingPost);
            fileChooser.setSelectedFile(originFileCache);
            if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION){
                userSetting.setLastSaveDir(fileChooser.getCurrentDirectory());
                File saveFile = fileChooser.getSelectedFile();
                if (originFileCache.exists()){
                    try{
                        FileUtils.copyFile(originFileCache, saveFile);
                        downloadToLabel.setEnabled(false);
                        downloadToLabel.setText("下载完成");
                    }catch (IOException ex){
                        logger.warn("复制文件异常");
                        downloadToLabel.setText("复制文件失败");
                    }
                }else{
                    downloadToLabel.setEnabled(false);
                    downloadToLabel.setText("下载中……");
                    executor.execute(() -> {
                        boolean flag = netIO.cacheFile(saveFile, presentingPost.getOriginUrl(), true);
                        SwingUtilities.invokeLater(() -> {
                            if (flag){
                                downloadToLabel.setText("下载完成");
                            }else{
                                downloadToLabel.setText("下载文件失败");
                                downloadToLabel.setEnabled(true);
                            }
                        });
                    });
                }
            }
        }
    }//GEN-LAST:event_downloadToLabelMouseClicked

    public void addLoadingListener(LoadingListener listener){
        loadingListeners.add(listener);
    }

    public void removeLoadingListener(LoadingListener listener){
        loadingListeners.remove(listener);
    }

    public Image getImage(){
        return image;
    }

    public void showPost(Post post){

        loadPost(post, false);

        presentingPost = post;

        postLabel.addMouseListener(new MouseAdapter(){

            @Override
            public void mouseClicked(MouseEvent e){
                if (SwingUtilities.isRightMouseButton(e)){
                    loadPost(presentingPost, true);
                }
            }
        });

        tagPanel.removeAll();
        for (String tagName : post.getTags().split(" ")){
            JLabel label = new JLabel();
            if (tagName.length() > 20){
                label.setText(tagName.substring(0, 17) + "...");
                label.setToolTipText(tagName);
            }else{
                label.setText(tagName);
            }
            label.setForeground(Color.WHITE);
            label.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            label.addMouseListener(new MouseAdapter(){

                @Override
                public void mouseClicked(MouseEvent e){
                    moebooruViewer.listPosts(tagName);
                }

            });
            tagPanel.add(label);
            executor.execute(() -> {
                Tag tag = netIO.retry(() -> mapi.findTag(tagName));
                if (tag != null){
                    SwingUtilities.invokeLater(() -> {
                        Color color = tagColorMap.get(tag.getType());
                        if (color != null){
                            label.setForeground(color);
                        }
                    });
                }
            });
        }
    }

    private void loadPost(Post post, boolean force){
        postLabel.setIcon(null);
        postLabel.setText("加载中……");
        loadingListeners.forEach(l -> l.loading(new LoadingEvent()));
        image = null;

        executor.execute(() -> {
            Image image = netIO.loadSample(post, force);
            SwingUtilities.invokeLater(() -> {
                this.image = image;
                if (presentingPost == post){
                    if (image != null){
                        showImage();
                    }else{
                        postLabel.setText("加载失败！");
                    }
                    loadingListeners.forEach(l -> l.done(new LoadingEvent()));
                }
            });
        });
    }

    private void showImage(){
        postLabel.setText("");
        resizeImage();
    }

    public void updateImage(){
        if (image != null){
            resizeImage();
        }
    }

    private void resizeImage(){
        postLabel.setIcon(new ImageIcon(MoebooruViewer.resizeImage(image, postLabel.getWidth(), postLabel.getHeight())));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel downloadLabel;
    private javax.swing.JLabel downloadToLabel;
    private javax.swing.JLabel postLabel;
    private javax.swing.JPanel tagPanel;
    private javax.swing.JPanel toolPanel;
    // End of variables declaration//GEN-END:variables
}
